{"ast":null,"code":"class Auth {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this.checkToken = () => {\n      return fetch(`${this._url}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(this._handleResponse);\n    };\n    this._url = baseUrl;\n    this._headers = headers;\n  }\n  _handleResponse(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n    return res.json();\n  }\n  register(email, password) {\n    return fetch(`${this._url}/signup`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(this._handleResponse);\n  }\n  auth(email, password) {\n    return fetch(`${this._url}/signin`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(this._handleResponse);\n  }\n}\nconst auth = new Auth({\n  baseUrl: 'http://localhost:3000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport default auth;","map":{"version":3,"names":["Auth","constructor","baseUrl","headers","checkToken","fetch","_url","method","then","_handleResponse","_headers","res","ok","Promise","reject","status","json","register","email","password","credentials","body","JSON","stringify","auth"],"sources":["C:/Users/Алексей/dev/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["class Auth {\n    constructor({ baseUrl, headers }) {\n        this._url = baseUrl;\n        this._headers = headers;\n    }\n\n    _handleResponse(res) {\n        if (!res.ok) {\n            return Promise.reject(`Ошибка ${res.status}`);\n        }\n        return res.json();\n    }\n\n    register(email, password) {\n        return fetch(`${this._url}/signup`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: this._headers,\n            body: JSON.stringify({password, email})\n        }).then(this._handleResponse)\n    }\n\n    auth(email, password) {\n        return fetch(`${this._url}/signin`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: this._headers,\n            body: JSON.stringify({password, email})\n        }).then(this._handleResponse)\n    }\n\n    checkToken = () => {\n        return fetch(`${this._url}/users/me`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }).then(this._handleResponse)\n      };\n}\n\nconst auth = new Auth({\n    baseUrl: 'http://localhost:3000',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  \n  export default auth;"],"mappings":"AAAA,MAAMA,IAAI,CAAC;EACPC,WAAWA,CAAC;IAAEC,OAAO;IAAEC;EAAQ,CAAC,EAAE;IAAA,KA8BlCC,UAAU,GAAG,MAAM;MACf,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACC,IAAK,WAAU,EAAE;QACpCC,MAAM,EAAE,KAAK;QACbJ,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC,CAACK,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC;IAC/B,CAAC;IApCC,IAAI,CAACH,IAAI,GAAGJ,OAAO;IACnB,IAAI,CAACQ,QAAQ,GAAGP,OAAO;EAC3B;EAEAM,eAAeA,CAACE,GAAG,EAAE;IACjB,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;MACT,OAAOC,OAAO,CAACC,MAAM,CAAE,UAASH,GAAG,CAACI,MAAO,EAAC,CAAC;IACjD;IACA,OAAOJ,GAAG,CAACK,IAAI,CAAC,CAAC;EACrB;EAEAC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACtB,OAAOd,KAAK,CAAE,GAAE,IAAI,CAACC,IAAK,SAAQ,EAAE;MAChCC,MAAM,EAAE,MAAM;MACda,WAAW,EAAE,SAAS;MACtBjB,OAAO,EAAE,IAAI,CAACO,QAAQ;MACtBW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACJ,QAAQ;QAAED;MAAK,CAAC;IAC1C,CAAC,CAAC,CAACV,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC;EACjC;EAEAe,IAAIA,CAACN,KAAK,EAAEC,QAAQ,EAAE;IAClB,OAAOd,KAAK,CAAE,GAAE,IAAI,CAACC,IAAK,SAAQ,EAAE;MAChCC,MAAM,EAAE,MAAM;MACda,WAAW,EAAE,SAAS;MACtBjB,OAAO,EAAE,IAAI,CAACO,QAAQ;MACtBW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACJ,QAAQ;QAAED;MAAK,CAAC;IAC1C,CAAC,CAAC,CAACV,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC;EACjC;AAUJ;AAEA,MAAMe,IAAI,GAAG,IAAIxB,IAAI,CAAC;EAClBE,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAeqB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}